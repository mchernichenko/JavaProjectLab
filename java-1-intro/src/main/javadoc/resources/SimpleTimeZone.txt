 Класс SimpleTimeZone
Класс SimpleTimeZone являясь потомком TimeZone реализует его абстрактные методы и
предназначен для использования в настройках использующих Григорианский календарь.
В большинстве случаев нет необходимости создавать экземпляр этого класса с помощью
конструктора. Вместо этого лучше использовать статические методы которые возвращают
экземпляр класса TimeZone рассмотренные в предыдущем параграфе. Единственная,
пожалуй, причина для использования конструктора -
(!!!)необходимость задания нестандартных правил перехода на зимнее и летнее время.
В классе SimpleTimeZone определено три конструктора. Рассмотрим наиболее полный, с
точки зрения функциональности) вариант, который помимо временной зоны задает летнее
и зимнее время.
public SimpleTimeZone(int rawOffset,
                      String ID,
                      int startMonth,
                      int startDay,
                      int startDayOfWeek,
                      int startTime,
                      int endMonth,
                      int endDay,
                      int endDayOfWeek,
                      int endTime)
rawOffset - временное смещение относительно гринвича
ID - идентификатор временной зоны. (см. пред.параграф)
startMonth - месяц перехода на летнее время
startDay - день месяца перехода на летнее время*
startDayOfWeek - день недели перехода на летнее время*
startTime - время перехода на летнее время (указывается в миллисекундах)
endMonth - месяц окончания действия летнего времени
endDay - день окончания действия летнего времени*
endDayOfWeek - день недели окончания действия летнего времени*
endTime - время окончания действия летнего времени (указывается в миллисекундах)

Месяц перехода времени начинает отсчитываться с нуля. Для этих целей можно применять
константы определенные в классе Calendar, например Calendar.JANUARY
Перевод часов на зимний и летний вариант исчисления времени определяется специальным
правительственным указом. Обычно переход на летнее время происходит в 2 часа в
последнее воскресенье марта, а переход на зимнее время - в 3 часа в последнее
воскресенье октября.
Алгоритм расчета таков
• если startDay 1 и установлен день недели, то будет вычисляться первый день недели
startDayOfWeek месяца startMonth ( например первое воскресенье)
• если startDay -1, и установлен день недели, то будет вычисляться последний день
недели startDayOfWeek месяца startMonth (например последнее воскресенье)
• если день недели startDayOfWeek установлен в 0, то будет вычисляться число startDay
конкретного месяца startMonth
• для того что бы установить день недели после конкретного числа специфицируется
отрицательное значение дня недели. Например, что бы указать первый понедельник
после 23 февраля используется вот такой набор startDayOfWeek=-MONDAY, startMonth=FEBRUARY,
startDay=23
• для того что бы указать последний день недели перед каким-либо числом, указывается
отрицательное значение этого числа и отрицательное значение дня недели. Например,
для того что бы указать последнюю субботу перед 23 февраля необходимо задать такой
набор параметров startDayOfWeek=- -SATURDAY, startMonth=FEBRUARY, startDay=-23
• все вышеперечисленное относится так же и к окончанию действия летнего времени.
Рассмотрим пример получения текущей временной зоны с заданием перехода на зимнее
и летнее время для России по умолчанию.

public class Test {
public Test() {
}
public static void main(String[] args) {
Test test = new Test();
SimpleTimeZone stz = new SimpleTimeZone(
TimeZone.getDefault().getRawOffset()
,TimeZone.getDefault().getID()
,Calendar.MARCH
,-1
,Calendar.SUNDAY
,test.getTime(2,0,0,0)
,Calendar.OCTOBER
,-1
,Calendar.SUNDAY
,test.getTime(3,0,0,0)
);
System.out.println(stz.toString());
}
int getTime(int hour,int min,int sec,int ms){
return hour * 3600000 + min * 60000 + sec * 1000 + ms;
}

java.util.SimpleTimeZone[id=Europe/Moscow,offset=10800000,dstSavings=3600000,useDaylight=true,startYear=
0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=
2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=10800000,endTimeMode=0] 