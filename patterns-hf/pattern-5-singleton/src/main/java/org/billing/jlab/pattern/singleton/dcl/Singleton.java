package org.billing.jlab.pattern.singleton.dcl;

/**
 *   Почти самая лучшая реализация паттерна-одиночка, но поддерживается только в Java 5 и выше
 *   volatile - гарантирует, что параллельные программные потоки будут правильно работать с переменной uniqueInstance при её инициализации экзампляром Singleton
 *
 *   (!) Когда переменная объявлена как volatile, любая запись её будет осуществляться прямо в память, минуя кеш.
 *   Также как и считываться будет прямо из памяти, а не из всевозможного кеша.
 *   Это значит, что все потоки будут "видеть" одно и то же значение переменной одновременно
 *
 *   Далее, если два потока прошли условие if (uniqueInstance == null), то только один поток сможет выполнить синхронизационный блок и установить переменнцю uniqueInstance
 *   Второй поток уже увидит "правильное" значение uniqueInstance и обломиться на внутренней проверке if (uniqueInstance == null)

 Чтобы создался новый инстанс должны быть пройдены 3 этапа:
  1. выделение памати под создаваемый объект (как минимум для хранения numCount)
  2. получение ссылки на область памяти, выделенную под объект
  3. инициализация объекта, т.е. вызов конструктора и выставление значение полей объекта в начальное значение

  в п.3 кроется дъявол, т.к. 1-й поток может пройти п.1,2 и далее произошла смена контекста, начал ваполняться другой поток, который
  увидит, что ссылка не пустая и возврашает объект, у которого numCount = 0 вместо -1, т.к. 1-й поток не успел её проинициализировать.

  Возможно в 8-й java что-то поменялось, но в 7-й это не рекомендуемая форма создания синглтона.

 */

public class Singleton {
	private volatile static Singleton uniqueInstance;

	private int numCount;
 
	private Singleton() {
		System.out.println("Создание Singleton ...");
		numCount = -1;
	}

	public static Singleton getInstance() {
		if (uniqueInstance == null) {    // синхронизация выполняется только при первом вызове => минимизируется использование синхронизации
			synchronized (Singleton.class) {
				if (uniqueInstance == null) {
					uniqueInstance = new Singleton();
				}
			}
		}
		return uniqueInstance;
	}

	public int getNumCount() {
		return numCount;
	}

}
