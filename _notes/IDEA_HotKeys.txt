Для запуска jar-архивов по DoubleClick
C:\>assoc .jar=jarfile
C:\>ftype jarfile="C:\path\to\your\javaw.exe" -jar "%1" %*

Просмотр JAR в ТotalСommander: На архиве нажать Ctrl-PgDown.

Рекомендации по использованию
====================================== Интерфейс =========================================
1. Убрать лишние тулзы: ToolBar, Tool Buttons (Alt+1 Показать окно проекта), Navigаtion Bar (Alt+Home показать)
   2xAlt и задержать, то появится скрытый Tool Buttons
   Shift+Ctrl+F12 - максимизировать окно редактора
   Ctrl+` 	Quick switch current scheme или Settings->Appearance & Behavior -> Appearance
   Ctrl+Shift+A - навигация по быстрым вызовам (shortcut)
   Ctrl+Alt+F10 - Full screen (shortcut по умолчанию не определён)

2. Alt+Ins - создание чего либо в проекте (класса, пакета и пр.)
3. Shift+Esc - Cкрыть все ненужное кроме окна с кодом
4. Statement Complition: Ctrl+Shift+enter - Перевести курсор внутрь класса или завершение строки, оператора; 
5. psvm+Tab - Настраиваются шаблоны Settings->Live Templates
   Ctrl+J - подсказка/подбор Live шаблона
6. Установить Autoscroll to Source и Autoscroll from Source для того чтобы не потеряться в структуре проекта или в классе   

====================================== Code Complition: ======================================
	6.1. Bisic Complition: Ctrl+Space или 2x Ctrl+Space - подбирает по любому вхождению при вводе
		- типа/метода: Достаточно набрать по 2 буквы метода, чтобы его найти: для BufferedReader достаточно набрать Bure
		- переменной: Подходящее название переменной также можно закомплитить, набрав первую букву переменой и Ctrl+Space будет предложено подходящее имя.
		- при подборе метода по имени: 2xBasicComplite способен по имени метода найти все классы где он встречается, например, sort
	6.2. Smart Complition: Ctrl+Shift+Space или 2x Ctrl+Shift+Space показывает только те элементы которые подходят под тип переменной при создании объекта
		- Вызов методов: Вызвать какой либо метод достаточно первой буквы переменной и первой буквы метода: например r.c подберёт reader.close() 
		- Код можно писать слева направо!: Сначала создать объект, а переменную с типом создать по SmartTypeComplition (Ctrl+Alt+V)
		- Присваивание значений переменным: 2xSmartTypeComplition позволяет искать подходящие типы для переменной не только в текущем контексте,
			но и в методах которые могут быть вызваны для этих переменных
		- ввод переменных вызываемого метода: используем для подбора SmartTypeComplition
		! если нужно закомплитить в отрицательном смысле, вместо Space жмем Shift+!
		
	6.3. Parameter info: Ctrl+P
	6.4. Quick popups: Ctrl+Q, Shift+Ctrl+I - быстрые подсказки документации доступные при просмотре предложения в завершении кода
	6.5. Настройки завершения можно изменить в настройках редактора
	6.6. Alt+Enter - статический импорт при выборе из меню статического метода

	====LiveTemplate===
	Ctrl+J - Insert Live Template
	Crtl+Alt+T - Обернуть шаблоном
	"hello".sout -> завернуть в sout
	"значениеПеременной".var -> объявить переменную (Ctrl+Alt+V)
	условие.if -> создать условие if, если обернуть в условие, то через Crtl+Alt+T
   
====================================== Редактирование ======================================
7. Alt + -> (<-) - навигация по закладкам
8. Crtl+W / Shift+Ctrl+W - Последовательное выделение (увеличение/уменьшение) структур выражения. Удобно выделять целые строки и методы для комментирования
9. Ctrl+. - скрыть тело метода и не только (Folding). Определяется в настройках Settings → Editor → Code Folding.
10. Alt+F3 - поиск в файле и F3 переход к следующемы фрагменту
Удерживая Alt - можно выделять столбцы
Удаление Ctrl+Y, перемещение Shift+Ctrl+Arrows, дублирование строк Ctrl+D

====================================== Навигация по проекту ======================================
Ctrl+Alt+Left/Right - переход взад/вперёд по последним открытым закладкам
Ctrl+Shift+Left/Right - переход взад/вперёд по последним редакциям
Ctrl+E или Shift+Ctrl+E - последние используемые файлы (редактируемые файлы)
Ctrl+F4 - закрыть закладку

Ctrl+F12 - показывает структуру файла
Ctrl+Tab - переключение между открытими файлами и тулзами
Alt+Home - Jump to navigation bar
Alt+ ↑↓ - переход между методами
Ctrl + { and Ctrl + } - переход между скобками
Ctrl+N/Ctrl+Shift+N/Ctrl+Alt+Shift+N - поиск класса или имени файла или там и там в контексте или везде, если нажать дважды
 Например: если файлов web.xlm много, но мы знаем что он в каталоге hostmanager, 
				то пишем h/w.x (первая буква каталога, файла и расширения)
Alt+F1 - открыть конкретный window tool, который ранее скрыли

====================================== Быстрые подсказки ======================================
Ctrl+P - подсказка по параметрам функции
Ctrl+Shift+I - быстрый просмотр тела вызываемой функции
Ctrl+Q - быстрый просмотр описания функции. Нажав Pin Button позсказку можно закрепить на экране
Alt+Ctrl+F7 - просмотреть, где ещё  (файлах/библиотеках) используется выражение
! Важно что быстрые подсказки доступны не только из окна редактирования, а из других подсказок, например из Complition

====================================== Поиск usages ======================================
Alt+F7 - Show usages - произведёт поиск использования объекта или выражения в других файлах
Alt+Ctrl+F7 (или Ctrl+F7) - тоже самое только в Quick popup, а ещё позволяет найти все методы которые реализуют определённый класс или интерфейс

====================================== Рефакторинг и написание тестов ======================================
Ctrl+Shift+Alt+T - список доступных действий для рефакторинга выделенной части кода, на случай если не помним ShortCut
Ctrl+Alt+V/M/C/F/P  - Extract Variable/Method/Constant/Field/Parameter

Ctrl+Alt+N - Inline local variable	- полезно для переменных, которые используются 1 раз, и от них можно избавиться.
Например, add(new Object())
	
F6 - переместить метод в отдельный класс	
Ctrl+Shift+T - Navigate Test Предлагается создать класс для теста, можно сразу выбрать метод, который хотим протестировать
Alt+Insert - Generate Code Создать тестовый метод
Shift+F6 - изменить имя переменной с автоматической заменой везде

====================================== Inspections ======================================

====================================== Reformat code (Settings → Code Style) ======================================
Alt+Ctrl+I - быстрое построчное форматирование текущей строки кода
Alt+Ctrl+L


-- Генерация элементов класса  (см. язык Kotlin)
- Пишем создание пока не существующего класса который хранит какие либо данные (new Person("Nik",27);)     
- Если класса нет IDEA предложит его создать
- Для параметров конструктора можно автоматически создать переменные (Alt+Enter и выбрать Bind Conctructor Parameters to fields)
- Создание Getter`ov: Alt+Insert и выбрать Getter
			
====================================== Улучшение существующего кода ======================================
Ctrl+Alt+T - Surround with - успользуем, если выражение нужно обернуть условием
Инвертация условия цикла Alt+Enter (или лампочка слева) и Invert 

====================================== Local History======================================
Local History → Show History
Локальная история хранится 5 дней, есть история по файлу, выделенному фрагменту или по целой папке.
Можно указать Put Label, для выделения какой-то полуфинальной версии, для быстрого её поиска 

===== Create JAR ======
Необходимо создать артефакт (в меню Ctrl+Shift+Alt+S) и при его build будет сгенерирован JAR.
1. Project Settings, вкладка Artifacts. Нажимаем [+], в выпавшем меню выбираем JAR.
2. В панели слева - содержимое JAR-файла, в панели справа - содержимое проекта. Перетаскиваем справа налево все, что хотим включить в JAR.
3. Указываем имя для файла и директорию назначения над панелями
3. Нажимаем на  кнопку create manifest под левой панелью, создаем manifest.mf. При этом IDE спросит Main class и classpath для указания в манифесте.
Важно: путь к файлу манифеста указать в коневой папке с откомпилированными классами, например \tagret\classes
4. При необходимости поставить галочку "Build on make" над панелями
5. Теперь в меню Build есть команда сборки артефакта		

PS: Лучше сборку делать Maven`ом	

====== Создание несуществующих объектов ==========
1. пишем создание несуществующего объекта new Person("Nik", 27);
2. Java предлагает его создать
3. После создания автоматически генерируется его конструктор, с указанными типами
        public Person(String nik, int i)
	переменные переименовываем:
	public Person(String name, int age) { //
4. Ошибок пока нет, но Idea говорит, что name и age ни где не используются
По Alt+Enter idea предлагает их удалить, но мы выбираем "Bing Constructor Parameters to fields"
Автоматически создаются private параметры и их инициализация
5. Далее по Alt+Ins генерим гетеры и сеттеры
6. При необходимости equals/hasCode и пр.
