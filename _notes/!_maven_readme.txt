Основной ликбез на русском: http://www.apache-maven.ru/

Ссылки: Минусы maven: http://skipy-ru.livejournal.com/5517.html
Хорошее описалово maven (http://study-and-dev.com/blog/build_management_maven_1/):
Менеджер репозиториев Sonatype Nexus для проксирования артефактов Maven: http://habrahabr.ru/post/114861/
																		http://habrahabr.ru/post/171493/
Введение в Continuous Integration (автоматич. сборка): http://habrahabr.ru/post/82724/
Проблемы релиз-менеджмента в maven: http://habrahabr.ru/post/160145/
Atlassian Bamboo в картинках: http://habrahabr.ru/post/170581/
===============================================================================================================
основные команды:
mvn test -Dmaven.compiler.source=1.5 -Dmaven.compiler.target=1.5 - запуск компиляции с указанием версии
mvn dependency:tree  - список зависимостей
mvn dependency:list
mvn dependency:purge-local-repository – служит для удаления из локального репозитория всех артефактов, от которых прямо или косвенно зависит наш проект.
	Затем удаленные артефакты заново загружаются из internet, это может быть нужно, когда какой-то из файлов артефактов был загружен из internet со сбоями и нет времени искать его
mvn dependency:sources - для загрузки из internet исходников для всех артефактов используемых в проекте
m2 dependency:copy-dependencies -DoutputDirectory=target/lib - скопирование зависимости проекта в target/lib
mvn clean install -Dmaven.test.skip=true - компиляция (можно указать сборку) без компиляции и запусков тестов
mvn install:install-file -DgroupId=bar-group -DartifactId=commons-bar -Dversion=1.0 -Dpackaging=jar -Dfile=file-bar-commons.jar   - самостоятельное инсталлирование библиотеки в локальный репозиторий 
mvn exec:java -Dexec.mainClass=package.ClassName - запуск приложения с указанием точки входа
================================================================================================================

	Nexus локальный сервер Maven репозитория. Используется для хранения локальных артефактов Maven, и как прокси-сервер для локального хранения удаленных артефактов Maven. 
Значительно сокращает время загрузки удаленных артефактов всеми членами команды, и предохраняет от недоступности внешних репозиториев.

	Настройка Apache Maven — фреймворк для автоматизации сборки проектов, специфицированных на XML-языке POM(Project Object Model).
Maven, в отличие от другого сборщика проектов Apache Ant, обеспечивает декларативную, а не императивную сборку проекта.
То есть, в файлах проекта pom.xml содержится его декларативное описание, а не отдельные команды. Все задачи по обработке файлов Maven выполняет через плагины.
!!!Maven описывает конечную структуру проекта. maven по своему подходу концентрируется на том, ЧТО надо сделать, а не пути к ее достижению, в отличие от Ant!!!
Вариант КАК сделать у maven один: через ЖЦ, библиотки из репозитория, действия - плагинами и НИКАК ИНАЧЕ!

Шаг 1. Установка Maven в OS Windows
Для начало скачаем Framework Maven: http://maven.apache.org/download.cgi (apache-maven-3.0.5-bin.zip)
Начинаем его установку.
1. Распаковываем zip архив в любую удобную для вас директорию, я распаковываю в корень диска для удобства, например, C:\\apache-maven-3.0.5
-- Переменные среды: Win+Pause, далее «Дополнительные параметры системы» -> «Переменные среды«, затем «Создать« --
2. Создаем переменную среды с именем M2_HOME = C:\\apache-maven-3.0.5.
3.  M2 = %M2_HOME%\bin
4. MAVEN_OPTS = -Xms256m или -Xmx512m. Это зависит от настроек вашей виртуальной машины. Данный пункт является необязательным, он просто дает некоторые дополнительные возможности для Maven.
5. измените переменную Path, присвоив ей значение %M2%. Данное действие позволит нам работать с Maven через командную строку.
6. Также убедитесь, что у вас есть переменная с именем JAVA_HOME и она содержит путь к вашему JDK. К примеру: C:\Program Files\Java\jdk1.7.0
7. Откройте командную строку и выполните в ней mvn —version, чтобы убедиться в корректной установке. Вы должны увидеть информацию о текущей версии Maven.
 
Шаг 2. Установка Maven в Intellij IDEA
Или же если вы пользуетесь средой разработки Intellij IDEA, то достаточно зайти в File->Settings-> Maven  и установить путь: C:\\apache-maven-3.0.5 
По идее Idea сама находит Maven home directory, если корректно настроены переменая окружения M2_HOME на Шаге 1.

Шаг3. Мавен использует файл настроек settings.xml на который указывает M2_HOME. При необходимости настраиваем proxy для internet в секции <proxies>/<proxy>   
	 (доступ нужен обязательно иначе maven не сможет загрузить необходимые для своей работы артефакты, во всяком случае при первом запуске),
пути к репозиториям и пр.
Можно использовать свой пользовательский файл настроек ${home}/.m2/settings.xml, перекрывающий системный в %M2_HOME%\conf.
Если прокси нет или он определяется автоматически, то ничего специально настраивать не нужно. 
Проверить, что maven имеет доступ к интернету можно запустив, например, mvn archetype:generate > log_archetypes.file, для вывода в файл всех шаблонов для создания проекта (см. Шаг 4:gererate_archetypes_tofile.bat).

Шаг4. Создать проект по шаблону (архитипу). Управление архетипами автоматизирован плагином maven-archetype-plugin
	mvn archetype:generate -- команда выведет список всех доступных шаблонов основного репозитория maven http://repo1.maven.org/maven2, т.к. про другие он не знает 
	(все public-репозитории необходимо прописать в settings.xml или pom.xml в секции repository)
Можно другой репозиторий указать в команде, например на проекте AppFuse много своих шаблонов для быстрого развертывания Web-приложений:
	mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes 
  -DarchetypeArtifactId=appfuse-basic-jsf
  -DremoteRepositories=http://static.appfuse.org/releases 
  -DarchetypeVersion=2.0.2 
  -DgroupId=com.mycompany.app 
  -DartifactId=myproject
  
Создать проект по шаблону можно из IDEA: New Project и указать тип проекта Maven. Плагин для создания проекта закачивается в репозиторий ${home}/.m2/repository и выполняется maven`ом
Список доступных шаблоной предлагаемы IDEA и  выдаваемой командой mvn archetype:generate несколько разниться, хз почему. Нужно просто иметь это ввиду.

Шаг 5: Из "коробки" maven знает о существовании одного репозитория, из которого загружаются нужные для работы проекта зависимости-библиотеки-артефакты в 
локальный  репозиторий (по дефолту это ".m2/repository")
все public-репозитории необходимо прописать в settings.xml или pom.xml в секции repositories/repository/name (url, id), но лучше в settings.xml, т.к. pom.xml внутри проекта, и является общим для всех разработчиков в команде.
(на эту тему см. настройку на репозиторий Nexus http://habrahabr.ru/post/114861/ и http://habrahabr.ru/post/126966/, а также настройка POM.xml: http://habrahabr.ru/post/171493/)
например, в settings.xml:
	<profile>
    <id>nexus</id>
    <repositories>
      <repository>
        <id>nexus-repo</id>
        <name>Nexus repo</name>
        <url>http://localhost:8081/nexus/content/groups/public</url>

PS: maven использует многоуровневую схему настройки проекта. 
    Первый уровень – это уровень проекта, т.е. настройки специфические для конкретного проекта и только для него в файле pom.xml. 
	Второй уровень – глобальный для всех проектов на этом компьютере, хранятся внутри файла settings.xml, внутри каталога “.m2” или указать командой -Dorg.apache.maven.user-settings=/path/to/user/settings.xml 	
		
Шаг 6: В случае использования в сети предприятия собственного репозитория maven, который является по сути веб-прокси-сервером (Sonatype Nexus) для доступа ко всем другим public-репозиториям доступным в internet.
достаточно настроиться только на него в settings.xml (не в POM!!!), где прописать его в секции "settings/proxies/proxy". Список удалённых репозиториев настраивается уже не локально, а на  сервере репозиториев.
<settings>
  <proxies>
    <proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <username>proxyuser</username>
      <password>proxypass</password>
      <host>proxy.host.net</host>
      <port>80</port>
      <nonProxyHosts>local.net,some.host.com</nonProxyHosts>
    </proxy>
  </proxies>
</settings>
 
Шаг 7: Настройка POM.xml - файл структуры проекта для сборки maven`ом
Общая структура POM описана здесь: http://www.apache-maven.ru/project-file.html
внутри <project> м.б. определены
 * <repositories>  - определение репозиториев, в которых производится поиск зависимотей
 * <pluginRepositories> - аналогично, только репозиторий плагинов
 * <dependencies> - описание всех зависимостей от других библиотек в проекте
 * <plugins> - настройки используемых плагинов
 * <properties>  - определение переменных используемых в pom.xml
 * <modules> - используем если проект многомодульный
 * <reporting>
 * <dependencyManagement>
 * <distributionManagement>
 *  <build> - информация по самой сборке. тэг, который может содержать
         o <defaultGoal>
         o <resources>
         o <testResources>
         o <finalName>
 *  <profiles> тэг, который может содержать
         o <profile>
			o далее все тоже что и внутри <project>

Готовый шаблон см. в текущей директории.

Тэг <build> - не обязательный т. к. существуют значения по умолчанию. Этот раздел содержит информацию по самой сборке: где находятся исходные файлы, где ресурсы, какие плагины используются.
По умолчанию:
Файлы исходников в src/main/java, переопределяется в <sourceDirectory>
Файлы ресурсов в src/main/resources, переопределяется в <resource>
результаты компиляции в  target/classes, переопределяется в <outputDirectory> 
Имя JAR: artifactId-version, переопределяется в <finalName>
 
Шаг 9: Настройка фаз ЖЦ Maven
compile: компиляция проекта и копирование результататов в подкаталог target/classes
package: упаковка текстовых/графических ресурсов приложения вместе со скомпилированными class-файлами в архив
install: файл артефакта инсталлируется внутрь локального maven-репозитория
deploy: упакованный файл артефакта копируется в удаленное хранилище, например, в общедоступный internet-репозиторий или ftp-сервер

- упаковка в jar - плагин: maven-jar-plugin
Подробнее: http://www.dokwork.ru/2012/10/mavenplugins.html ; http://habrahabr.ru/post/131164/
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-jar-plugin</artifactId>
	  <configuration>
	   <archive>
	     <manifest>
	     <mainClass>blackzorro.App</mainClass>
	     </manifest>
	   </archive>
	  </configuration>
	</plugin>

PS:project/build/plugins - стандартное место для настройки всех плагинов

Шаг 7: Настроим плагин для IDEA (http://habrahabr.ru/post/110187/): каждая из зависимостей будет оформлена как отдельная библиотека, для каждой из библиотек будут загружены исходные коды и документация
			<plugin>
                <artifactId>maven-idea-plugin</artifactId>
                <version>2.2.1</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                    <dependenciesAsLibraries>true</dependenciesAsLibraries>
                    <useFullNames>false</useFullNames>
                </configuration>
            </plugin>

maven-idea-plugin позволяет скачивать документацию и исходники зависимостей проекта, что дает возможность заглянуть внутрь исходных кодов платформы или библиотеки или быстро ознакомиться с javadoc’ом (Ctrl+Q).			


Шаг xx: Инсталлировать в репозиторий файлы, которые не доступны в public-репозиториях (причин много, например, свои библиотеки)
Если какой-то проект не доступен в виде maven-репозиториев, а только в виде скомпилированных jar-файлов или файлов с исходными кодами и ant-скриптом, который выполняет их компиляцию,
то единственным выходом является искусственное maven-изирование такого проекта. После этого он прописывается в репозитории, в "правильном" каталоге и для него будет сознан POM.xml
mvn install:install-file 
  -DgroupId=bar-group -DartifactId=commons-bar -Dversion=1.0 -Dpackaging=jar -Dfile=file-bar-commons.jar

================

Для java (да и для любого другого языка) характерно огромное количество библиотек, framework-ов, для web, для работы с базами данных, веб-сервисами используемых для компиляции и запуска проекта.
Библиотек этих много, много и их версий (ведь библиотеки развиваются). 
Хотя есть sun-стандарт, описывающий то какая должна быть структура каталогов и файлов в конечном приложении (размещаемом на сервере), но вот стандарта того, как должны быть организованы
(опять таки в каких каталогах и подкаталогах должны) исходные файлы проекта, такого стандарта нет. Например, каталог с выходными файлами может называться и out, и output, и classes.
По-разному могут называться и размещаться в каталоге проекта и папки, хранящие файлы графических ресурсов, css-файлов и файлов с javascript-ом и шаблоны html-страниц.
Если взять чужой проект (сознанный х.з. в какой IDE) возникает проблема его импорта, а именно “раскладки” файлов из старого проекта по новым правилам (папочкам) и определение ЗАВИСИМОСТЕЙ (это самая главная беда).
Т.е. когда создавался проект в IDE, то в составе проекта определяются пути к внешним библиотеким (jar-файлам) которые используются в проекте 
(В IDEA см. Project Structure -> Dependencies и они видны в дереве проекта External Libraries). Затем классы этик библиотек могут импортироваться в классы нашего проекта 
(import не увеличивает размер класса, а только позволяет передать Java полное имя класса, которое является уникальным). 

Если над проектом работает несколько человек, то у каждого могут быть свои личные Dependencies (с разными путями к файлам библиотек и проектов). Это не позволяет хранить в CVS файлы проекта =>
другие участники проекта не могут извлечь проект из репозитория, откомпилить его, развернуть на тестовом стенде и пр. 
Следовательно, в репозитории должна храниться информация о проекте, о том какие модули входят в его состав, какой модуль зависит от какого – и все это в максимально абстрактном виде.
Т.е. нам нужен такой стандарт представления проекта, который бы не зависел от среды разработки (читай, поддерживался бы ими всеми). 
Та же беда и с библиотеками, нужными для компиляции проекта: где их хранить? Единственное приемлемое решение – поместить их также внутрь cvs-репозитория. 
Таким образом, java-проект представляет в репозитории максимально самодостаточную единицу: он содержит и файлы с исходным кодом и библиотеки нужные для их компиляции и некий супер-скрипт,
который выполняет компиляцию проекта и подготовку его к развертыванию на “боевом” веб-сервере. 

