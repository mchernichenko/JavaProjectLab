/**
 * weather - пример реализации паттерна Наблюдатель
 * weatherobservable - пример использования встроенной поддержки паттерна в java API
 *      Встроенная поддержка плоха тем, что Observable является классом => поведение Observable невозможно добавить к
 *      существующему классу, который расширяет другой суперкласс. А определить свой интерфейс нельзя.
 *      Как правило прииходится создавать собственую реализацию паттерна
 * swing - другой пример использования патерна в JDK. Ловим событие нажания кнопки.
 *      Паттерн Наблюдатель широко используется в Swing - набор графических элементов. Там своя реализация паттерна.
 *      Признак того что объект является источником события является наличие метода начинающегося на add и заканчивающегося
 *      на Listener: addXxxxListener(XxxListener k), где в качестве аргумента всегда интерфейс слушателя, который нужно реализовать.
 *      Источники событий генерируют объект  события XxxEvent (java.awt), которые передаются слушателям
 *      (наподобие как в update передается Object arg). В этом объекте может передаваться доп. информация о источнике.
 *      Например, кнопка JButton - это субъект, когда она меняет свое состояние (например нажимается),
 *      то вызывается метод actionPerformed(ActionEvent event) интерфейса ActionListener (по аналогии с update).
 *      JButton реализует интерфейс AbstractButton, который уже имеет методы регистрации наблюдателей (по аналогии с Observeable).
 *      Наблюдатели или слушатели должны реализовать интерфейс ActionListener для обработки событий от кнопки.
 */
package org.billing.jlab;