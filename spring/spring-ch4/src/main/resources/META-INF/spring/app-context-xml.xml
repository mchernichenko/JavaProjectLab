<?xml version="1.0" encoding="UTF-8"?>

<!-- Сначала объявляется пространство имен Spring, при этом по дефолту этим пространством является beans, используемое для объявления бинов, которые должны управляться Spring
     Пространство имен beans является базовым и обязательным - требуется для объявления бинов
     Платформа Spring предоставляет много других пространств для различных целей:
           - context - обеспечивает поддержку для конфигурирования ApplicationContext
           - p - предоставляет более простую конфигурацию DI для Setter Injection
           - c -  предоставляет более простую конфигурацию DI для Constructor Injection
           - util - предоставляет ряд полезных утилит для конфигурации DI
           - aop, tx - для поддержки АОП, транзакций и пр
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

       <!-- Конфигурируем два бина, один в качастве внедряемого и один в качестве цели для внедрения (messageRenderer)
       Каждый бин имеет идентификатор и каждому бину можно (необязательно) назначить псевдоним с помощью атрибута name
       Пресводим можно использовать при внедрении бина см. <ref bean="псевдоним или id бина"
       -->

       <bean id="messageProviderId" name="messageProvider" class="org.billing.jlab.spring.ch4.xml.HelloWorldMessageProvider"/>

       <!-- свойство messageProvider класса StandardOutMessageRenderer инициализируется бином с id=messageProviderId через метод установки -->
       <bean id="messageRenderer" class="org.billing.jlab.spring.ch4.xml.StandardOutMessageRenderer">
           <property name="messageProvider">
               <ref bean="messageProviderId"/>
           </property>
       </bean>

      <!--Альтернативный вариант внедрения через метод установки -->
    <!--       <bean id="messageRenderer" class="org.billing.jlab.spring.ch4.xml.StandardOutMessageRenderer"
             p:messageProvider-ref="messageProvider"/> -->

    <!-- Пример внедрения через конструктор.
         Если несколько аргументов или несколько конструкторов, то каждому дескриптору constructor-arg
         нужно предоставить атрибут index начиная с 0. Если у класса несколько конструкторов, то нужно указать ещё и тип аргумента,
         для того чтобы создать объект (экземпляр класса-бин) вызвав нужный конструктор.
         Дескриптор <value> используется для простых типов, для внедрения объектов попрежнему нужно использовать <ref>
         Конфиг приведён в общем виде.
    -->
       <bean id="configurableMessageProvider" class="org.billing.jlab.spring.ch4.xml.ConfigurableMessageProvider">
            <!--  <constructor-arg type="java.lang.String" index="0" value="Конфигурируемое сообщение [app-context-xml]"/>-->
              <constructor-arg type="int" index="0" value="5"/>
             <!-- <constructor-arg>
                     <value>Конфигурируемое сообщение</value>
              </constructor-arg>-->
       </bean>

       <!-- Тоже самое, пример внедрения через конструктор используя пространство имён "c"-->
<!--    <bean id="configurableMessageProvider" class="org.billing.jlab.spring.ch4.xml.ConfigurableMessageProvider"
          c:msg="Конфигурируемое сообщение"/>-->

    <bean id="configurableMessageRenderer" class="org.billing.jlab.spring.ch4.xml.StandardOutMessageRenderer"
          p:messageProvider-ref="configurableMessageProvider"/>

    <!-- Конфигурирование внедрения простых значений  -->
    <bean id="injectSimple" class="org.billing.jlab.spring.ch4.xml.InjectSimple">
        <property name="name" value="John Smith"/>
        <property name="age" value="35"/>
        <property name="height" value="1.78"/>
        <property name="programmer" value="true"/>

        <property name="ageInSeconds">
            <value>1103760000</value>
        </property>
    </bean>

    <!--  Внедрение простых значений в бины с применением SpEL -->

    <!-- Конфигурационный бин, содержащий значения, предназначенные для внедрения -->
    <bean id="injectSimpleConfig" class="org.billing.jlab.spring.ch4.xml.InjectSimpleConfig"/>
    <!--  Внедрение свойств, значения которые беруться из конфигурационого бина -->
    <bean id="injectSimpleSpel" class="org.billing.jlab.spring.ch4.xml.InjectSimpleSpel">
        <property name="name" value="#{injectSimpleConfig.name}"/>
        <property name="age" value="#{injectSimpleConfig.age + 1}"/>
        <property name="height" value="#{injectSimpleConfig.height}"/>
        <property name="programmer" value="#{injectSimpleConfig.programmer}"/>
        <property name="ageInSeconds" value="#{injectSimpleConfig.ageInSeconds}"/>
    </bean>

    <!--  внедрение бинов -->
    <bean id="oracle" name="wiseworm" class="org.billing.jlab.spring.ch4.beanfactory.BookwormOracle"/>
    <bean name="injectRef" class="org.billing.jlab.spring.ch4.xml.InjectRef">
       <property name="oracle">
           <ref bean="oracle"/>
       </property>
    </bean>

    <!-- Иерархия ApplicationContext (HierarchicalAppContextUsage.class)
         в дескрипторе ref можно ссылаться на бины как в дочернем так и в родительском контекстах
         это позволяет перемещать бины между конфигурационными файлами по мере роста приложения

         в бин target1 внедряется бин injectBeanParent определённый в parent.xml
         в бин target2 внедряется бин injectBean. Т.к. он определён в обоих контекстах, то используется собственый контекст
         в бин target3 внедряется бин injectBean. Т.к. он определён в обоих контекстах, то для внедрения родительского бина требуется явное указание атрибура parent

         (!)Закоментированно для того чтобы запустить другие примеры, где не используется вложение контекстов
     -->
<!--     <bean id="injectBean" class="java.lang.String">
         <constructor-arg value="Дочерний бин"/>
     </bean>

     <bean id="target1" class="org.billing.jlab.spring.ch4.hierarchical.SimpleTarget">
         <property name="val" ref="injectBeanParent"/>
     </bean>

     <bean id="target2" class="org.billing.jlab.spring.ch4.hierarchical.SimpleTarget">
         <property name="val" ref="injectBean"/>
     </bean>

     <bean id="target3" class="org.billing.jlab.spring.ch4.hierarchical.SimpleTarget">
         <property name="val">
             <ref parent="injectBean"/>
         </property>
     </bean>-->

    <!--  Внедрение коллекций
          Чтобы внедрить коллекцию необходимо выбрать дескриптор list, map, set, props для предоставления экзамляров List, Map, Set, Properties соответственно
          Для list, map, set можно использовать любой дескриптор при внедрении в свойство и даже дескриптор другой коллекции
          Для props позволяет передать только String
    -->

    <bean id="injectCollection" class="org.billing.jlab.spring.ch4.xml.CollectionInjection">
        <property name="map">
            <map>
                <entry key="someValue">
                    <value>Hello World!</value>
                </entry>
                <entry key="someBean">
                    <ref bean="oracle"/>
                </entry>
            </map>
        </property>
        <property name="props">
            <props>
                <prop key="firstName">Clarence</prop>
                <prop key="secondName">Ho</prop>
            </props>
        </property>
        <property name="set">
            <set>
                <value>Hello World!</value>
                <ref bean="oracle"/>
            </set>
        </property>
        <property name="list">
            <list>
                <value>Hello World!</value>
                <ref bean="oracle"/>
            </list>
        </property>
    </bean>

    <!-- Конфигурация необиночного бина
        область действия бина на уровне прототипа (scope="prototype") заставляет Spring создавать новый экзампляр бина каждый раз, когда он запрашивается приложением -->
    <bean id="nonSingleton" class="java.lang.String" scope="prototype">
        <constructor-arg>
            <value>Clarence Ho</value>
        </constructor-arg>
    </bean>

</beans>