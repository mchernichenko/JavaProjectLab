0. Как поставить Ansible вручную на пустую BM: https://confluence.billing.ru/pages/viewpage.action?pageId=28224667
> sudo yum install epel-release
> sudo yum -y install ansible

Рекомендуется также юзать пакетный менеджер питона PIP или из исходников (см. гугл):
> sudo yum -y install git
> git clone https://github.com/ansible/ansible.git --recursive
> cd ./ansible
> source ./hacking/env-setup

Настройка SSH доступов, если их нет. Можно пропинговать все хосты "ansible -i hosts all -m ping", чтобы пропинговать все хосты
> ssh-keygen -t rsa
> ssh-copy-id -i user@server
=====
hosts - сервера с которыми взаимодействует ansible
ansinle.cfg - настройки окружения
playbook - сценарии (наборы последовательных инструкций ), состоящие из одной и более задач (ролей), описываются с помощью функциональности ядра или сторонних модулей ansible в формате YAML
		YAML парсер: http://yaml-online-parser.appspot.com/


AdHoc команды - команды которые выполняются без playbook: http://docs.ansible.com/ansible/intro_adhoc.html
  ansible -i <инвентарный файл> <группа серверов> -m <модуль> -a <аргументы модуля>
Примеры:
> ansible -i hosts box2 -m copy -a "src=/etc/hosts dest=/home/vagrant/dest_dir"   --копирование на удалённом хосте box2 из scr в dest
> ansible –i hosts box2 -m shell -a 'echo $TERM'  -- выполнить shell команду на удалённом сервере box2
> ansible -i hosts all -m ping -- пропинговать все хосты

===== HOSTS =======================================================

Можно указывать одиночные хосты (ip, их имена, алиасы и прочие параметры: тип подключения, пользователя под которым хародим на хост и пр.), можно их группировать, а можно группировать группы, например:

# здесь указываются внегрупповые хосты
[группа_1 хостов, обычно указывают продукт, который ставится]
10.10.0.101
aliace ansible_ssh_host=10.10.0.102 ansible_ssh_user=vagrant ansible_ssh_password=vagrant ansible_connection=ssh

[группа_2 хостов]
host1
host2
[группа_3:children]   -- это группа групп, где children служебное слово
# здесь указываются подгруппы
....

===== ansible.cfg =========================================================
http://docs.ansible.com/intro_configuration.html
можно переопределить часть или всю конфигурацию в параметрах playbook или переменных окружения. При исполнении команд Ansible проверяет наличие файла конфигурации в следующих расположениях:
	Проверяется переменная окружения ANSIBLE_CONFIG, которая может указывать на файл конфигурации.
	./ansible.cfg – в текущей директории
	~/.ansible.cfg — в домашней директории
	/etc/ansible/ansible.cfg — в каталоге, сгенерированном при установке ansible через менеджер пакетов.

# включить логирование
log_path=/home/vagrant/ansible.log
# проверка ключа включена по умолчанию. Если хост переустанавливался и имеет свой ключ в "known_hosts", это приведет к сообщению об ошибке
host_key_checking = false

========= Шаблонизатор Jinja ====================
Шаблонизатор - изначально предназначен как механизм для создания HTML-страниц путем заполнения HTML-шаблонов динамическими данными, получаемыми из СУБД или внешних источников.
Шаблонизатор предоставляет некую надстройку над синтаксисом HTML для создания шаблонов и API для их использования.

Бызовай функционал:
 {{ переменная/выражение }} - позволяет распечатать значение переменной или какого-то выражения
 {% операторы %} - позволяет вызвать дополнительные теги, среди которых условные выражения, различные варианты циклов и многое другое.
 {{ переменная-выражение|функция }} - Фильтры -  начинается все с переменной или выражения, после чего можно через символ | указать как её обработать перед выводом в итоговый документ
                                      Пример {{ foo|lower }} выведет содержимое строки foo в нижнем регистре. Как и в pipes, из фильтров можно делать цепочки.
 {# Комментарии #}

