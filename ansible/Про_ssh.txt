Памятка здесь: https://m.habrahabr.ru/post/122445/

(!!!!) Все действия ниже делаем из оболочки Git Bash - интерпретатор bash для Windows, т.к. он  «понимает» команды Git (Из cmd не  будет работать)
+ команды для Git Bash можно без переделки использовать в среде Unix. Входит в дистрибутив Git for Windows (msysGit).

Как автоматически запускать ssh-agent при запуске git bash описано здесь https://help.github.com/articles/working-with-ssh-key-passphrases/#auto-launching-ssh-agent-on-git-for-windows
Если вкратце в ssh-agent прогружаются все закрытые ключи и их паролями и нужен только для удобства, т.е для 2 целей:

1. чтобы не вводить каждый раз пароли секретного ключа, если он есть, а если пароль не задавать, то можно и без агента
2. Если есть несколько ключей для разных целей, то при соединении по ssh придется указывать нужный ключ вручную, но для этого можно использовать ~/.ssh/config
3. можно автоматически прогружать новые ключи, если указать в ~/.ssh/config  AddKeysToAgent yes для любого хоста, т.е. Host *
   иначе через ssh-add /home/demo/.ssh/id_rsa
   просмотреть добавленные ключи ssh-add -l

Если вкратце процесс подключения по ssh такой (http://www.unixwiz.net/techtips/ssh-agent-forwarding.html)

1. запуская > ssh user@server происходт соединение с сервером на порт SSH (по дефолту 22, либо указывается в команде или ~/.ssh/config, см. п.4 в подробностия)
   здесь неявно передаётся открытый ключ пользователя на сервер

2. На сервере, в каталоге пользователя, под которым заходим, есть файл ~/.ssh/authorized_keys с открытыми ключами,
   и если в нем найден открытый ключ который был передан, то запрашивается аутентификация по этому ключу
   Прим: Для копирования открытого ключа на сервер, для авторизации без пароля, т.е. по ключу, см. п.2 в разделе ПОДРОБНОСТИ
   Важно, чтобы права на файл ~/.ssh/authorized_keys должны быть chmod 700 ~/.ssh, т.е. давать возможность писать только юзеру, иначе ssh его не примет

3. После проверки сервером файла authorized_keys пользователя на наличие публичного ключа он посылает клиенту последовательность, зашифрованную открытым ключом .
   Если приватный ключ защищен кодовым словом, то /usr/bin/ssh просит его ввести для дешифровки приватного ключа,
   но обычно его не защищают кодовым словом (!)
   Также сервер посылает открытый ключ сервера. Ключ сервера (без пароля) хранится в /etc/ssh/ssh_host_rsa_key и /etc/ssh/ssh_host_rsa_key.pub

4. Если расшифровка удалась, то сервер пускает клиента без запроса пароля Unix
   Если на сервер заходим первый раз, то ssh спрашивает - доверяем ли мы открытому ключу сервера? Если да — ключ сохраняется в файл ~/.ssh/known_hosts
   Это нужно для того чтобы быть уверенным, что мы заходим на "правильный" сервер, на который заходили раньше.
   Т.к. м.б. ситуация, что под этим именем хоста на самом деле уже другая машина. Как правило, если машина переставляется, на её копируются старые ключи, а не генерятся новые.

5. При отсутствии корректных ключей пользователю будет предложено авторизоваться по паролю

===== ПОДРОБНОСТИ ==========================================================================================================================================

1. Генерация ключей.
Утилита ssh-keygen уже встроена в git, т.е. зайдя в git_bash будет доступна команда ssh-keygen.
Можно скачать PuTTYgen — генератор ключей, про него здесь: https://habrahabr.ru/post/127521/
* Есть ещё утилитка Pageant - агент авторизации PuTTY, для тех кто часто пользуется PuTTY: https://wiki.diphost.ru/PuttyConfigAgent
  По сути это хранилище закрытых ключей в памяти. Профит в том, что при подключении к серверу через PuTTY не требуется в настройках каждого соединения указывать путь к приватному ключу.
  Просто вводим имя хоста (или IP-адрес) и пользователя SSH. После этого PuTTY выполнит автоматическую авторизацию при помощи ключей Pageant.
  + приватный ключ также может быть защищён паролем, и чтобы при каждом соединении не было запроса его пароля для разблокировки удобно использовать специальны агент управления ключами SSH.

> ssh-keygen -t rsa                 : создание ключей с именами по умолчанию (id_rsa/id_rsa.pub) в папке /home/<user>/.ssh
> ssh-keygen -t rsa -f dz-ansible   : создание ключей с заданными именами в заданной папке, в данном случае в текущей

Важно при генерации ключей не задавать пароль, чтобы его уже не вводить, собственно ради этого все и делаем, иначе будет запрашивать пароль к приватному ключу.

2. Копирование открытого ключа на сервер
Это позволяет ходить на машину без пароля. Ключ добавляется в "~/.ssh/authorized_keys" на сервере, а не замещает как "scp"

> ssh-copy-id -i user@server

> ssh-copy-id -i ~/.ssh/id_rsa_xxx user@server            : Когда публичный ключ лежит не по дефолтному пути или с недефалтовым именем
> ssh-copy-id -i ~/.ssh/id_rsa_xxx "-p port user@server"  : Когда ssh работает на нестандартном порту:

Альтернативный вариант через scp:
> scp ~/.ssh/id_rsa.pub username@example.com:~/id_rsa.pub  -- если писать сразу в файл /authorized_keys, то он его заместит
> chmod -R 600 ~/.ssh   -- права на файл не должны давать возможность писать в этот файл посторонним пользователям, иначе ssh его не примет.
> chmod 700 ~/.ssh
> cat ../id_rsa.pub >> authorized_keys     : непосредственное добавление ключа

3. Зайти на машину по ssh
> ssh user@server
> ssh -i ~/.ssh/id_rsa_xxx user@server     :Когда открытый ключ лежит не по дефолтному пути или с недефалтовым именем

4. Настройка алиасов ssh: ~/.ssh/config
Можно все настройки вынести в конфигурационный файл, чтобы каждый раз не указывать параметры соединения, например

Host *
    AddKeysToAgent yes      -- автоматическое добавление ключей в ssh агента и их паролей

Host test_host              -- название алиаса, которое вы будете указывать при подключении по SSH (Пример: "ssh example");
    User username           -- имя вашего пользователя на сервере;
    Hostname server.com     -=- имя хоста вашего сервера (в отличии от Host это действительно имя сервера, а не просто имя для соединения);
    Port 22
    IdentityFile ~/.ssh/id_rsa_xxx   -- файл с открытым ключом, который передаётся на сервер при подключении

> ssh test_host   : Простая команда для коннекта к server.com под пользователем username

5. Запуск/останов
> sudo service ssh stop|start|restart  : Запуск/останов сервиса, требуется после изменения конфигурации в /etc/ssh/sshd_config

6. Монтирование удаленной папки с помощью sshfs
> sshfs user@hostingserver.ru:/home/userdir ~/sshfsdir      : монтируем удаленную папку в директорию
> fusermount -u ~/sshsfdir                                  : размонтирование

7. Очистка ~/.ssh/known_hosts
    Удалить известный ключ сервера можно командой: ssh-keygen -R server.
    При этом нужно удалить ещё и ключ IP (они хранятся раздельно): ssh-keygen -R 127.0.0.1.


Копирование:
	> scp path/myfile user@8.8.8.8:/full/path/to/new/location/
	> scp user@8.8.8.8:/full/path/to/file /path/to/put/here
