---
# playbook - исполняющий сценарий, содержащий список задач или ролей, начинающийся с ---, так в YAML обозначается начало документа
# Перед каждым новым разделом списка ставится дефис -
# Основными параметрами/группами простого сценария являются: hosts, tasks

  # задаём имя сценарию-плейбуку, необязательный параметр, но для логов лучше имя задавать
- name: Playbook_Name_1
  # на каких хостах выполняется сценарий, обязательный параметр
  hosts : box2
  # собирать или нет информацию о хостах перед выполнением задач. системная переменная, по умолчению yes
  gather_facts: yes
  # Сценарии могут выполняться не только от имени пользователя, под именем которого установлено соедиение, но и любого другого
  # remote_user: root

  # если требуется выполнять команды под другим пользователем или запускать команды от пользователя с sudo правами.
  # включаем возможность повышения приведегий и указываем пользователя, отличного от того под кем зашли или от remote_user
  become: yes
  become_method: sudo
  #become_user: vagrant

  # запускать команды от пользователя с sudo правами. переопределяет ansible.cfg. УСТАРЕВШЕЕ
  # sudo: yes
  
  # переменные плейбука
  vars:
    playbook_name: "Playbook_Name"

  # переменные, которые запрашиваются при запуске плейбука
  vars_prompt:
    - name: "prompt_var"
      prompt: "what is your name?"

  # перечисление тасков или ролей, т.е. шаги сценария, которые необходимо произвести на управляущих узлах
  # каждая таска выполняется для каждого хоста в группе и только после этого выполняется следующая таска
  # если какая-то таска не выполнилась для какого-то хоста, то и все последующие таски для этого хоста не будут выполнятся
  tasks:
    # задание исполняющее модуль debug с параметрами, выводящими значения переменных, собранных из системых фактов gather_facts
  - name: "Task1: {{playbook_name}}"
    # вывод всех собранных фактов
    # debug: var=hostvars[inventory_hostname]
    debug: msg="IP адреса интерфейсов хоста {{ansible_all_ipv4_addresses}}"
    # Для каждой задачи можно указывать пользователя, от имени которого она будет выполнена
    # sudo: yes

  - name: "Task2: {{playbook_name}}"
    debug: msg="Хост {{inventory_hostname}} has gateway {{ansible_default_ipv4.gateway}}"

  - name: "Task3: {{playbook_name}}"
    copy:
    # агрументы модуля могут определяться каждый на новой строке
    src="/etc/hosts"
    dest="/home/vagrant/dest_dir"
    # все модули идемпотентны, т.е. копируемый файл есть, то 2-й раз он не копируется. Уведомление отработает только в случае, если
    # модуль фактически произвёл какое-то действие для хоста. Уведомления обрабатываются обработчиком (handlers) один раз после выполнения остальных зачач, т.е. в конце плейбука
    # в уведомлении может указываться конкретное имя обработчика или имя листенера (listen), чтобы можно повесить на обработчик несколько задач
    # это облегчает запуск нескольких обработчиков и упрощает совместное использование обработчиков
    notify:
    #- handler name
    - run handler

  # обработчики запускаются в объявленом порядке, а не в том в котором уведомляются, и запускаются в последнюю очередь, т.е. после всех ролей, тасков, кроме тасков в разделе post_tasks, см. 2_ncludes_roles
  # имена обработчиков являются глобальными переменными
  # если имеются два обработчика с одинаковым именем, то выполнится один
  #
  handlers:
  - name: handler name
    debug: msg="Исполнение обработчика handler name. Произведено копирование файла hosts на удалённуй машину"
    # обработчики также могут «слушать» общие темы, и задачи могут уведомлять эти темы
    listen: "run handler"