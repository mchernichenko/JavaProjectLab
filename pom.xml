<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--версия системной библиотеки maven-model-builder.jar, где дефолтные значения maven
       (пути к исходным, откомпилированным файлам, правило именования jar файла и пр.) приведены в pom-4.0.0.xml-->
    <modelVersion>4.0.0</modelVersion>

    <!--cсылка на родительский pom, где в artifactId указывается родительский artifactId. groupId и version указываем как в родительском pom, т.к. модули одного проекта -->
    <!--    <parent>
            <groupId>org.billing.jlab</groupId>
            <artifactId>MegaLab</artifactId>
            <version>1.0</version>
        </parent>-->

    <!--Основная и обязательная информация о проекте-->
    <!-- если вы компания veniki ltd и ваш флагманский продукт “super bookreader”, то вы можете считать, что группа артефактов groupId это “veniki ”, а сам продукт имеет имя artifactId “bookreader”.
    Пример для Петер-сервис:
	<groupId>com.peterservice.pays.pps</groupId>   - здесь м.б. обозначена группа продуктов или сам продукт
    <artifactId>pps-srv</artifactId>  - это либо продукт или его компонента или п/с
	-->

    <!--<groupId>${myapp.groupId}</groupId>
    <artifactId>${myapp.artifactId}</artifactId>
    <version>${myapp.version}</version>-->

    <groupId>org.billing.jlab</groupId>
    <artifactId>JavaProjectLab</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--Дополнительная необязательная информация о проекте-->
    <name>JavaProjectLab (FullNameProject)</name>
    <description>Description project</description>
    <url>http://billing.ru</url>

    <!--тип проекта после сборки. Возможные варианты pom, jar, war, ear. Если представление проекта м.б. только jar, то можно packaging и не указывать
        pom - указывается в родительском pom.xml многомодульного приложения
        Родительский POM удобен для наследования зависимостей, что избавляет от дублирования описаний.
        Чтобы наследование заработало, проект-предок, состоящий по сути из одного pom.xml, нужно установить в локальный репозиторий, запустив mvn install в папке с pom.xml файлом
        или указать ссылку на корневой модуль в <parent> <relativePath>../pom.xml</relativePath> </parent>

        Про работу с модулями описано здесь: https://github.com/wizardjedi/my-spring-learning/wiki/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D1%8F%D0%BC%D0%B8-maven
    -->
    <packaging>pom</packaging>

    <!-- Описание модулей проекта необязательно, если не требуется их собирать автоматически, т.е. модули проекта независимы и/или собирать их сразу все вместе не имеет смысла.
         Использование модулей позволяет описывать межпроектные(точнее межкомпонентные) зависимости, не создавая собственный репозиторий maven
         Кроме структуризации, разделение на модули позволяет упорядочить процесс сборки - собираем основной проект с головным pom.xml и автоматически собираются все подпроекты описаные в <modules>.
         Зависимости между модулями (связь типа модуль - подмодуль) описываются в разделах <modules /> для корневого модуля - и это нужно для сборки нескольких подмодулей
         и <parent /> - для подмодуля, который используется только для наследования

         Перечисление списка модулей, которые образуют проект представляет собой набор каталогов. Порядок не важен, т.к. если один подмодуль зависит от другого, то maven сам определит порядок сборки
         и сначала соберёт проект от которого зависят другие, например, server.jar, положит атрифакт в локальный рапозиторий, а затем соберуться зависимые проекты, которые будут использовать собранный ранее артифакт.
         Например: проект может состоять из busines-logic, web-interface. Можно сделать отдельные независимые проекты, т.е. разные п/с, но использовать модули удобнее для сборки сразу нескольких подпроектов
    -->
    <modules>
        <module>java-core/java-4-javadoc</module>
        <module>java-core/java-1-intro</module>
    </modules>

    <!--Здесь определяются переменные проекта, которые используются так: ${maven-jar-plugin.customClasspathLayout}
        По Ctrl+Alt+V можно выделить любую переменную в properties автоматически  -->
    <properties>
        <!--       <myapp.groupId>org.billing.jlab</myapp.groupId>
               <myapp.artifactId>JavaProjectLab</myapp.artifactId>
               <myapp.version>1.0-SNAPSHOT</myapp.version>
               <myapp.fillname>${myapp.artifactId}-${myapp.version}</myapp.fillname>-->

        <maven-clean-plugin.version>3.0.0</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.0.0</maven-dependency-plugin.version>
        <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
        <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
        <maven-javadoc-plugin.version>2.10.3</maven-javadoc-plugin.version>
        <maven-surefire-plugin.version>2.17</maven-surefire-plugin.version>

        <sonar-maven-plugin.version>3.0.1</sonar-maven-plugin.version>
        <sonar.language>java</sonar.language>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <camel-version>2.15.2</camel-version>
        <junit-version>4.12</junit-version>
        <testng-version>6.8.8</testng-version>
        <log4j-version>1.2.17</log4j-version>
        <slf4j-version>1.7.5</slf4j-version>
        <jcl.slf4j.version>1.7.18</jcl.slf4j.version>
        <logback.version>1.1.3</logback.version>
        <artifact.scope>compile</artifact.scope>
        <oracle.version>12.1.0.2</oracle.version>
        <spring-rabbit.version>1.5.4.RELEASE</spring-rabbit.version>
        <spring.version>4.2.5.RELEASE</spring.version>

        <skipTests>true</skipTests>
    </properties>

    <!--при необходимости можно указать ссылки на прочие репозитории, про который maven не знает. Например, на репозиторий Nexus
    Лучше это делать в settings.xml. На "поиграться" можно здесь.
    Из коробки он знает только про центральный http://repo1.maven.org/maven2
    -->

    <!--<repositories>
        <repository>
            <id>repository.jboss.com</id>
            <name>Jboss Repository for Maven</name>
            <url>http://repository.jboss.com/maven2//url>
        </repository>
        <repository>
            <id>cloudera-repo-releases</id>
            <url>https://repository.cloudera.com/artifactory/repo/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>repository.jboss.com</id>
            <name>Jboss Repository for Maven</name>
            <url>http://repository.jboss.com/maven2/</url>
        </pluginRepository>
    </pluginRepositories>-->

    <!--
        Тэг <dependencies> - определяет список всех библиотек (зависимостей) которые используюся в проекте
        Каждая библиотека идентифицируется также как и сам проект - тройкой groupId, artifactId, version (GAV), ещё есть type (он же packaging) и classifier
        Эти хар-ки однозначно идентифицируют артефакт и путь, по которому будет находиться этот артефакт, например,
        мой проект ru.billing.app:TestMavenPrj-1:jar:1.0-SNAPSHOT инсталлируется в локальный репозиторий по адресу
        .m2\repository\ru\billing\app\TestMavenPrj-1\1.0-SNAPSHOT\, или задеплоить в удалённый репозиторий, где м.б. сразу доступен для использования другим проектам, нужно только зависимость прописать.
        Подключая зависимость maven автоматически производит загрузку библиотек в локальный репозиторий, если её там нет, а IDEA
        автоматически обновляет список External Libraries (см. св-ва проекта) для успешной компиляции проекта.
    -->
    <dependencies>

        <!-- Зависимость для использования Spring Framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-oracle</artifactId>
            <version>1.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
            <version>1.3.6.RELEASE</version>
        </dependency>

        <!-- Зависимость для использования Apache Camel -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>${camel-version}</version>
        </dependency>

        <!-- Логи -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-version}</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>org.slf4j</groupId>-->
            <!--<artifactId>slf4j-log4j12</artifactId>-->
            <!--<version>${slf4j-version}</version>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>joda-time</groupId>-->
            <!--<artifactId>joda-time</artifactId>-->
            <!--<version>2.9.9</version>-->
        <!--</dependency>-->

        <!-- Для тестов -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit-version}</version>
            <!--Scope задаёт для чего библиотека используется. в данном случае только в тестах и загружается только при запуске цикла test, когда перед компиляциеё теста загрузится необходимая библиотека
                Использование библиотеки в основном коде выдаст ошибку кампиляции.
                Библиотека пемеченная как compile (по дефолту, и для этой библиотеки scope можно опустить) будет доступна  везде, т.е. при компиляции основного приложения и тестов и на стадии запуска основного прил. и тестов
                Библиотека пемеченная как provided не упаковывается в файл проекта, предполагается гагантированное её наличие там, где будет использоваться приложение
                Библиотека пемеченная как runtime не нужна для компиляции, а только на стадии выполнения
                Библиотека пемеченная как system, если не доступна из репозитория (это костыль и не рекомендуется так использовать!). В systemPath прописывается пут к ней.
            -->
            <scope>compile</scope>
            <!--<systemPath>${java.home}/lib/особеннаяЛиба.jar</systemPath>-->
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng-version}</version>
            <scope>${artifact.scope}</scope>
        </dependency>


    </dependencies>

    <!--Using Alternative Output Directory для javadoc
        работает только при запуске при запуске ЖЦ site. Путь автоматичечки берется из ${project.reporting.outputDirectory}  -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <configuration>
                    <!--<reportOutputDirectory>${project.reporting.outputDirectory}/myoutput</reportOutputDirectory>-->
                    <destDir>myapidocs</destDir>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <!--  Тэг <build> - располагается сразу после перечисления зависимостей проекта
          Этот раздел содержит информацию по самой сборке: где находятся исходные файлы, где ресурсы, какие ПЛАГИНЫ используются и их настроики.
    -->
    <build>
        <!--
                 Общие настройки сборки. Дефолтные значения maven приведены, их можно все посмотреть в pom-4.0.0.xml библиотеки maven-model-builder-3.2.1.jar
                 Это системная библиотека, версия задается в <modelVersion>4.0.0</modelVersion> и родительские настройки по умолчанию в pom-4.0.0.xml
                  и при необходимости изменить
                            <sourceDirectory>src/main/java</sourceDirectory>
                            <resources>src/main/resources</resources>
                            <outputDirectory>target/classes</outputDirectory>
                            <finalName>${artifactId}-${version}-xxx</finalName>
                            <directory>D:\!Files\Git_Repositories\JavaProjectLab\target</directory>
        -->
        <plugins>

            <!-- важный плагин для обеспечения определённых правил накладываемых на проект, например,
                 можем определять различные версии транзитивных зависимостей и падать в случае обнаружения последних (http://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html)
                 т.е. если обнаружили зависимости от разных версий одной библиотеки, то это потенциальный jar hell. В этом случае, либо исключаем зависимость (exclusions, см. ссылку), либо
                 прописываем нужную версию в dependencyManagement (см. ниже)
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <configuration>
                            <rules>
                                <!-- правило сходимости версий -->
                                <dependencyConvergence/>
                            </rules>
                        </configuration>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.5.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>
            <!--Настройка генерации javadoc
            По умолчанию javadoc помещается в ${project.reporting.outputDirectory}/apidocs и может быть переопределён
            Этот дефолтный путь определяется в maven-site-plugin, который успользует maven-javadoc-plugin
            создание javadoc в формате указаном в теге <goal> можно привязать к ЖЦ, и тогда javadoc будет формироваться автоматом на указанной фазе в <phase>
            -->
            <!--
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-javadoc-plugin</artifactId>
                            <version>2.10.3</version>
                            <configuration>
                                &lt;!&ndash;Переопределяем путь формирования javadoc в destDir относительно reportOutputDirectory&ndash;&gt;
                                &lt;!&ndash;<reportOutputDirectory>${project.reporting.outputDirectory}/myoutput</reportOutputDirectory>&ndash;&gt;
                                &lt;!&ndash;<destDir>myapidocs</destDir>&ndash;&gt;

                                &lt;!&ndash; тот тег нифига не переопределяется и чем от отличается от reportOutputDirectory не ясно&ndash;&gt;
                                &lt;!&ndash;<outputDirectory>${project.reporting.outputDirectory}/qqq</outputDirectory>&ndash;&gt;

                                &lt;!&ndash;docencoding "Cp1251" кодировка результирующего html,encoding UTF-8 кодировка исходника&ndash;&gt;
                                <encoding>UTF-8</encoding>
                                <docencoding>UTF-8</docencoding>

                                &lt;!&ndash;включаем копирование картинок, которые размещаются в src/javadoc/resources и копируются в /target/site/apidocs/resources&ndash;&gt;
                                <docfilessubdirs>true</docfilessubdirs>

                            </configuration>
                            &lt;!&ndash;При создании jar всегда создавать и  jar-архив javadoc&ndash;&gt;
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>javadoc</goal>
                                    </goals>
                                    <phase>package</phase>
                                </execution>
                            </executions>
                        </plugin>
            -->

            <!--Общие настройки компилятора для всех модулей проекта-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!-- source: версия JVM, для которой написан (обеспечивается совместимость) исходный код. Чтобы не корректировать старый код, иногда бывает полезно использовать этот ключик.-->
                    <!-- target: это версия JVM, с которой можно будет запускать приложение, т.е. классы компилируются для указанной JVM -->
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

            <!--Настройка копирования зависимостей от которых зависит проект в папку /lib, которая прописана в манифесте ниже. ЖЦ install -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!--includeScope задаёт фильтр для dependencies, которые попадут в lib. Это позволяет, к примеру, не включать junit (у которого scope test).-->
                            <includeScope>compile</includeScope>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--Настройка упаковки в JAR. По дефолту привязан к циклу package. см. http://maven.apache.org/plugins/maven-jar-plugin/jar-mojo.html
                Настройка генерации MANIFEST.MF в ЖЦ packаge -->
            <!--  <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-jar-plugin</artifactId>
                  <version>${maven-jar-plugin.version}</version>
                  &lt;!&ndash; В конфигурации jar плагина определяем правила формирования MANIFEST.MF&ndash;&gt;
                  <configuration>
                      <archive>

                          &lt;!&ndash;Добавляем в динамически созданный maven`ом манифест строками из собственного манифеста&ndash;&gt;
                          &lt;!&ndash;<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>&ndash;&gt;

                          <manifest>
                              &lt;!&ndash; Общепринятой методикой является создание структуры установочного каталога в виде двух подкаталогов: bin и lib.
                              Внутри lib находится и ваш код и абсолютно все библиотеки нужные для его запуска. В каталоге bin находится исполняемый файл в виде cmd-скрипта (для windows)
                              Для поиска библиотек в /lib включаем в манифест добавление Class-Path и позволяем дописывать префикс перед каждым ресурсом
                              т.е. все зависимые библиотеки должны быть в папке /lib. Копирование производится плагином maven-dependency-plugin, см. ниже.
                              Пример: Class-Path: lib/plexus-utils-1.1.jar , а также указываетм точку входа mainClass&ndash;&gt;
                              <addClasspath>true</addClasspath>
                              <classpathPrefix>lib/</classpathPrefix>

                              &lt;!&ndash;Если ClassPath нужно определить вручную &ndash;&gt;
                              &lt;!&ndash;<classpathLayoutType>custom</classpathLayoutType>
                              <customClasspathLayout>
                                  ${maven-jar-plugin.customClasspathLayout}
                              </customClasspathLayout>&ndash;&gt;
                              <mainClass>App</mainClass>
                          </manifest>
                      </archive>
                  </configuration>
              </plugin>-->


            <!--Skipping test by default
                Плагин используется на фазе run tests, тесты компилируются, но не запускаются-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>${skipTests}</skipTests>
                </configuration>
            </plugin>

            <!--Создание Uber jar-файл - это один огромный jar-файл, содержащий и код нашего приложения и все нужные для его работы библиотеки
                сливает артефакты в один jar плагин maven-shade-plugin. Можно слить зависимости, часть или вообще одну. В данном случае исключаем одну зависимость junit
             -->
            <!--
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-shade-plugin</artifactId>
                            <version>2.2</version>
                            <executions>
                                <execution>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>shade</goal>
                                    </goals>
                                    <configuration>
                                        <artifactSet>
                                            <excludes>
                                                <exclude>junit:junit</exclude>
                                            </excludes>
                                        </artifactSet>
                                        <transformers>
                                            <transformer  implementation="org.apache.maven.plugins.shade.resource.ComponentsXmlResourceTransformer"/>
                                        </transformers>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
            -->
        </plugins>
    </build>

    <!-- Этот раздел позволяет централизованно определить только версии используемых библиотек в многомодульном приложении
         Если в подмодуле требуется зависимость от какой-то библиотеки, то мы её обязаны все равно прописать в обычной секции
         <dependencies>, но уже без указания версии.
         Версия библиотеки определённая в dependencyManagement не означает, что от неё зависят подпроекты.
         Этот механизм позволяет гарантированно использовать одну версию библиотеки, если она используется в разных подпроектах,
         т.е. обеспечивается удобный контроль версий артифактов

         Ещё одно предназначение dependencyManagement - отключение транзитивных зависимостей, т.е. по сути в dependencyManagement напрямую указывается
         версия артифакта, которая будет использоваться вне зависимости от версии указанных в транзитивных зависимостях.
         Зависимость указанная в данном разделе может напрямую и не использоваться в проекте
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>2.9.7</version>
            </dependency>
            <!--<dependency>-->
                <!--<groupId>log4j</groupId>-->
                <!--<artifactId>log4j</artifactId>-->
                <!--<version>1.2.16</version>-->
            <!--</dependency>-->
        </dependencies>
    </dependencyManagement>

</project>
